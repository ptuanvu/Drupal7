<?php

/*
 * Implements hook_entity_info().
 */
function train227_entity_info()
{
  $info['employee'] = array(
    'label' => t('Employee'),
//    'controller class' => 'EntityAPIController',
    'controller class' => 'EmployeeController',
    //'extra fields controller class' => 'EntityDefaultExtraFieldsController',
    'label callback' => 'employee_label_generate',
    'base table' => 'employee',
    'fieldable' => TRUE,
    'access callback' => 'employee_access_callback',
    'uri callback' => 'employee_uri',
    'entity keys' => array(
      'id' => 'eid',
      'bundle' => 'type',
      'label' => 'fullname',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'mbv' => array(
        'label' => 'MBV Bundle',
        'admin' => array(
          'path' => 'admin/structure/employee/manage/%employee_bd',
          'real path' => 'admin/structure/employee/manage/mbv',
          'bundle argument' => 4,
          'access arguments' => array('administer employee entities'),
        ),
      ),
      'tcb' => array(
        'label' => 'TCB Bundle',
        'admin' => array(
          'path' => 'admin/structure/employee/manage/%employee_bd',
          'real path' => 'admin/structure/employee/manage/tcb',
          'bundle argument' => 4,
          'access arguments' => array('administer employee entities'),
        ),
      ),
    ),

    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => TRUE,
      ),
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),


  );
  
  return $info;
}

function employee_access_callback($op, $entity, $account, $entity_type)
{
  return true;
//  $account = $GLOBALS['user'];
//  return user_access('view', $account);
}

/*
 * Implements hook_permission().
 */
function train227_permission()
{
  $permissions = array(
    'administer employee entities' => array(
      'title' => t('Administer employee entities'),
    ),
    'view any employee entity' => array(
      'title' => t('View any employee entity'),
    ),
    'create employee entities' => array(
      'title' => t('Create employee entities'),
    ),
    'delete employee entities' => array(
      'title' => t('Delete employee entities'),
    ),
    'edit any employee entity' => array(
      'title' => t('Edut any employee entity'),
    ),
    'administer employee module' => array(
      'title' => t('Administer employee module'),
    ),
    'view mbv employee' => array(
      'title' => t('View mbv employee'),
    ),
    'add mbv employee' => array(
      'title' => t('Add mbv employee'),
    ),
    'edit mbv employee' => array(
      'title' => t('Edit mbv employee'),
    ),
    'delete mbv employee' => array(
      'title' => t('Delete mbv employee'),
    ),
    'view tcb employee' => array(
      'title' => t('View tcb employee'),
    ),
    'add tcb employee' => array(
      'title' => t('Add tcb employee'),
    ),
    'edit tcb employee' => array(
      'title' => t('Edit tcb employee'),
    ),
    'delete tcb employee' => array(
      'title' => t('Delete tcb employee'),
    ),
  );
  
  return $permissions;
}

function train227_user_access($string, $entity = NULL)
{
  $result = FALSE;

  if (!isset($entity)) {
    if ($string == 'view') {
      $result = user_access('view tcb employee') && user_access('view mbv employee');
    } else if ($string == 'edit') {
      $result = user_access('edit tcb employee') && user_access('edit mbv employee');
    } else if ($string == 'add') {
      $result = user_access('add tcb employee') && user_access('add mbv employee');
    } else if ($string == 'delete') {
      $result = user_access('delete tcb employee') && user_access('delete mbv employee');
    }

    return $result;
  }

  $type = '';
  if (gettype($entity) == 'string') {
    $type = $entity;
  } else {
    $type = $entity->type;
  }


  switch ($type) {
    case 'tcb' :
      if ($string == 'view') {
        $result = user_access('view tcb employee');
      } else if ($string == 'edit') {
        $result = user_access('edit tcb employee');
      } else if ($string == 'add') {
        $result = user_access('add tcb employee');
      } else if ($string == 'delete') {
        $result = user_access('delete tcb employee');
      }
      break;
    case 'mbv' :
      if ($string == 'view') {
        $result = user_access('view mbv employee');
      } else if ($string == 'edit') {
        $result = user_access('edit mbv employee');
      } else if ($string == 'add') {
        $result = user_access('add mbv employee');
      } else if ($string == 'delete') {
        $result = user_access('delete mbv employee');
      }
      break;
  }

  return $result;
}

function employee_label_generate($entity, $entity_type)
{
  return isset($entity) ? $entity->fullname . ' - ' . $entity->eid : 'Employee Object';
}

/*
 * Implements hook_menu().
 */
function train227_menu()
{
  $items = array();
  
  $items['train227/employee'] = array(
    'title' => 'Employee Entity',
    'page callback' => 'employee_info_page',
    'access arguments' => array('view any employee entity'),
  );
  $items['admin/structure/employee'] = array(
    'title' => 'Employee types',
    'description' => 'Manage employee type',
    'page callback' => 'employee_overview_types',
    'access arguments' => array('administer employee module'),
  );
  $items['admin/structure/employee/manage/%employee_bd'] = array(
    'title callback' => 'get_title_page_manager',
    'title arguments' => array(4),
    'page callback' => 'employee_list_entities',
    'page arguments' => array(4),
    'access arguments' => array('administer employee module'),
  );
  $items['admin/structure/employee/manage/%employee_bd/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/employee/manage/%employee_bd/add'] = array(
    'title callback' => 'get_title_add_page',
    'title arguments' => array(4),
    'page callback' => 'employee_add',
    'page arguments' => array(4),
    'access callback' => 'train227_user_access',
    'access arguments' => array('add', 4),
//    'access arguments' => array('create employee entities'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/employee/manage/add'] = array(
    'title' => 'Add an Employee Entity',
    'page callback' => 'employee_add',
    'access callback' => 'train227_user_access',
    'access arguments' => array('add'),
//    'access arguments' => array('create employee entities'),
    'type' => MENU_LOCAL_ACTION,
  );
  // List of all entity_example_basic entities.
  $items['admin/structure/employee/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['train227/employee/%employee'] = array(
    'title callback' => 'employee_title',
    'title arguments' => array(2),
    'page callback' => 'employee_view',
    'page arguments' => array(2),
    'access callback' => 'train227_user_access',
    'access arguments' => array('view', 2),
//    'access arguments' => array('view any employee entity'),
    
    //'access arguments' => array('view any employee entity'),
  );
  
  $items['train227/employee/%employee/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['train227/employee/%employee/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('employee_form', 2),
    'access callback' => 'train227_user_access',
    'access arguments' => array('edit', 2),
//    'access arguments' => array('edit any employee entity'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  $items['train227/employee/%employee/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('employee_form_delete_confirm', 2),
    'access callback' => 'train227_user_access',
    'access arguments' => array('delete', 2),
//    'access arguments' => array('delete employee entities'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );
  // Add example entities.
  $items['train227/employee/mbv/add'] = array(
    'title' => 'Add a mbv employee',
    'page callback' => 'employee_mbv_add',
    'access arguments' => array('add mbv employee'),
  );
  $items['train227/employee/tcb/add'] = array(
    'title' => 'Add a tcb employee',
    'page callback' => 'employee_tcb_add',
    'access arguments' => array('add tcb employee'),
  );
  $items['train227/delete'] = array(
    'title' => 'Delete By ID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_employee_by_id_form'),
    'access callback' => 'train227_user_access',
    'access arguments' => array('delete'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/employee'] = array(
    'title' => t('Employee Config'),
    'description' => 'Employee module settings',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    // we should implement this function in system.admin.inc file
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    // don't forget to add the file and path
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/employee/settings'] = array(
    'title' => t('Employee settings'),
    'description' => 'Settings of employee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('employee_admin_setting'),
    'access arguments' => array('administer site configuration'),
  );

  $items['train227/query_entity_example'] = array(
    'title' => t('Train 245 Query entity example'),
    'description' => 'Example for query entity',
    'page callback' => 'example_for_query_entity',
    'file' => 'train227.example.inc',
    'access callback' => TRUE,
  );

  $items['employee/my_employees'] = array(
    'title' => t('My employees'),
    'description' => 'List all employee, who I was created',
    'page callback' => 'get_all_employee',
    'file' => 'train227.employee.inc',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function train227_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'train227') . '/includes/views',
  );
}

function employee_overview_types()
{
  $field_ui = module_exists('field_ui');
  $header = array(t('Name'), array('data' => t('Operation'), 'colspan' => $field_ui ? '4' : '2'));
  $rows = array();

  $row1[] = array('data' => t('MBV bundle'));
  $row1[] = array('data' => l(t('List'), 'admin/structure/employee/manage/mbv'),);

  if ($field_ui) {
    $row1[] = array('data' => l(t('Manage fields'), 'admin/structure/employee/manage/mbv/fields'),);
    $row1[] = array('data' => l(t('Manage display'), 'admin/structure/employee/manage/mbv/display'),);
  }

  $row1[] = '';

  $row2[] = array('data' => t('TCB bundle'));
  $row2[] = array('data' => l(t('List'), 'admin/structure/employee/manage/tcb'),);

  if ($field_ui) {
    $row2[] = array('data' => l(t('Manage fields'), 'admin/structure/employee/manage/tcb/fields'),);
    $row2[] = array('data' => l(t('Manage display'), 'admin/structure/employee/manage/tcb/display'),);
  }

  $row2[] = '';

  $rows[] = $row1;
  $rows[] = $row2;

  $build['employee_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No bundle of employee entity type'),
  );

  return $build;

}

function get_title_add_page($type = NULL)
{
  if ($type != NULL) {
    return 'Add a ' . $type . ' employee type';
  } else {
    return 'Add an employee';
  }
}

function employee_title($entity)
{
  return $entity->fullname;
}

function train227_field_extra_fields()
{

  $form_elements['employee_id'] = array(
    'label' => t('Employee Id'),
    'description' => t('Employee Id (an extra form field)'),
    'weight' => -5,
  );

  $form_elements['fullname'] = array(
    'label' => t('Fullname'),
    'description' => t('Fullname (an extra form field)'),
    'weight' => -5,
  );

  $form_elements['dayofbirth'] = array(
    'label' => t('Day of Birth'),
    'description' => t('Day of Birth (an extra form field)'),
    'weight' => -5,
  );

  $form_elements['gender'] = array(
    'label' => t('Gender'),
    'description' => t('Gender (an extra form field)'),
    'weight' => -5,
  );


  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['employee_id'] = array(
    'label' => t('Employee Id'),
    'description' => t('Employee Id (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['fullname'] = array(
    'label' => t('fullname'),
    'description' => t('Fullnamee (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['dayofbirth'] = array(
    'label' => t('dayofbirth'),
    'description' => t('dayofbirth (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['gender'] = array(
    'label' => t('Gender'),
    'description' => t('Gender (an extra display field)'),
    'weight' => 0,
  );

  $extra_fields['employee']['employee_bundle']['form'] = $form_elements;
  $extra_fields['employee']['employee_bundle']['display'] = $display_elements;
  $extra_fields['employee']['mbv']['form'] = $form_elements;
  $extra_fields['employee']['mbv']['display'] = $display_elements;
  $extra_fields['employee']['tcb']['form'] = $form_elements;
  $extra_fields['employee']['tcb']['display'] = $display_elements;
  return $extra_fields;
}

function employee_admin_setting($form, $form_state)
{
  $form['max_fieldname_character'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum character of fieldname'),
    '#default_value' => variable_get('max_fieldname_character', 60),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t('Enter max character of fieldname'),
    '#required' => TRUE,
  );

  $form['field_name_required'] = array(
    '#type' => 'radios',
    '#title' => t('Is fieldname require?'),
    '#default_value' => variable_get('field_name_required', 1),
    '#description' => 'Choose whether field name require',
    '#options' => array(
      '1' => 'True',
      '0' => 'False',
    ),
  );

  return system_settings_form($form);
}

function employee_admin_setting_validate($form, &$form_state)
{
  if (!ctype_digit($form_state['values']['max_fieldname_character']))
    form_set_error('Max fieldname character', 'Please enter number on Maximum character of fieldname');
}

function employee_view($entity, $view_mode = 'tweaky')
{
  $wrapper = entity_metadata_wrapper('employee', $entity);
  $entity_type = 'employee';
  
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  
  field_attach_prepare_view($entity_type, array($entity->eid => $entity), $view_mode);
  
  entity_prepare_view($entity_type, array($entity->eid => $entity));
  
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  
  $entity->content['employee_id'] = array(
    '#type' => 'item',
    '#title' => t('Employee ID'),
    '#markup' => $entity->employee_id,
  );
  $entity->content['fullname'] = array(
    '#type' => 'item',
    '#title' => t('Fullname'),
    '#markup' => $entity->fullname,
  );
  $entity->content['dayofbirth'] = array(
    '#type' => 'item',
    '#title' => t('Birthday'),
    '#markup' => $entity->dayofbirth,
  );
  $entity->content['gender'] = array(
    '#type' => 'item',
    '#title' => t('Gender'),
    '#markup' => $entity->gender,
  );
  $entity->content['uid'] = array(
    '#type' => 'item',
    '#title' => t('User Name'),
    '#markup' => $wrapper->uid->name->value(),
  );
  
  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode);
  drupal_alter(array('employee_view', 'entity_view'),
    $entity->content, $entity_type);
  
  return $entity->content;
}

function employee_view_multiple($entities, $view_mode = 'teaser')
{
  $content = array();

  $rows = array();
  if (!empty($entities)) {
    //Make sure it is array.
    $entities = is_array($entities) ? $entities : array($entities);
    foreach ($entities as $entity) {
      $rows[] = array(
        'data' => array(
          'id' => $entity->eid,
          'employee_id' => l($entity->employee_id, 'train227/employee/' . $entity->eid),
          'fullname' => $entity->fullname,
          'dayofbirth' => $entity->dayofbirth,
          'gender' => $entity->gender,
          'created' => $entity->created,
          'bundle' => $entity->type,
        ),
      );
    }

    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Employee ID'), t('Fullname'), t('Birthday'), t('Gender'), t('Create'), t('Bundle')),
    );
  } else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No employee exist'),
    );
  }

  return $content;
}

/*
 * Function to show information of employee enitty.
 */
function employee_info_page()
{
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The employee provides a simple example entity.'),
  );
  
  if (user_access('administer employee module')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/employee/manage'))
    );
  }
  
  // Call function employee_list_entities to list all entity..
  $content['table'] = employee_list_entities();
  
  return $content;
}

/*
 * Function to create table of many employee page.
 */
function employee_list_entities($type = NULL)
{
  $content = array();
  $entities = employee_load_multiple();

  $rows = array();
  if (!empty($entities)) {
    //Make sure it is array.
    $entities = is_array($entities) ? $entities : array($entities);
    foreach ($entities as $entity) {
      if ($type == NULL) {
        $rows[] = array(
          'data' => array(
            'id' => $entity->eid,
            'employee_id' => l($entity->employee_id, 'train227/employee/' . $entity->eid),
            'fullname' => $entity->fullname,
            'dayofbirth' => $entity->dayofbirth,
            'gender' => $entity->gender,
            'created' => $entity->created,
            'bundle' => $entity->type,
          ),
        );
      } else if ($entity->type == $type) {
        $rows[] = array(
          'data' => array(
            'id' => $entity->eid,
            'employee_id' => l($entity->employee_id, 'train227/employee/' . $entity->eid),
            'fullname' => $entity->fullname,
            'dayofbirth' => $entity->dayofbirth,
            'gender' => $entity->gender,
            'created' => $entity->created,
            'bundle' => $entity->type,
          ),
        );
      }
    }
    
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Employee ID'), t('Fullname'), t('Birthday'), t('Gender'), t('Create'), t('Bundle')),
    );
  } else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No employee exist'),
    );
  }
  
  return $content;
}

function employee_add($type = NULL)
{

  if ($type == NULL) {
    $element[] = array(
      '#type' => 'item',
      '#markup' => l('Add MBV', 'train227/employee/mbv/add', array()),
    );
    $element[] = array(
      '#type' => 'item',
      '#markup' => l('Add TCB', 'train227/employee/tcb/add', array()),
    );
    return $element;
  } else {
    if ($type == 'mbv') {
      return employee_mbv_add();
    } else {
      return employee_tcb_add();
    }
  }
}

function employee_tcb_add()
{
  $entity = entity_create('employee', array('type' => 'tcb'));
  return drupal_get_form('employee_form', $entity);
}

function employee_mbv_add()
{
  $entity = entity_create('employee', array('type' => 'mbv'));
  return drupal_get_form('employee_form', $entity);
}

/*
 * Form design for employee
 */
function employee_form($form, &$form_state, $entity)
{
  $form['employee_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Employee ID'),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 60,
    '#default_value' => (isset($entity->employee_id)) ? $entity->employee_id : '',
  );
  $form['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fullname'),
    '#required' => TRUE,
    '#size' => variable_get('max_fieldname_character', 60) > 60 ? 60 : variable_get('max_fieldname_character', 60),
    '#maxlength' => variable_get('max_fieldname_character', 60),
    '#default_value' => (isset($entity->fullname)) ? $entity->fullname : '',
  );

  if (variable_get('field_name_required', 1)) {
    $form['fullname']['#required'] = TRUE;
  } else {
    $form['fullname']['#required'] = FALSE;
  }

  $form['dayofbirth'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#title' => t('Birthday'),
    '#required' => FALSE,
    '#default_value' => (isset($entity->dayofbirth)) ? $entity->dayofbirth : '',
  );

  $form['gender'] = array(
    '#type' => 'radios',
    '#options' => array(
      'male' => t('Males'),
      'female' => t('Females'),
    ),
    '#required' => FALSE,
    '#title' => t('Gender'),
    '#default_value' => (isset($entity->gender)) ? $entity->gender : '',
  );
  
  $form['created'] = array(
    '#type' => 'hidden',
    '#value' => (isset($entity->created)) ? $entity->created : REQUEST_TIME,
  );

  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => (isset($entity->type)) ? $entity->type : 'mbv',
  );
  
  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  
  field_attach_form('employee', $entity, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('employee_edit_delete'),
    '#weight' => 200,
  );
  
  return $form;
}

function employee_form_validate($form, &$form_state)
{
  field_attach_form_validate('employee', $form_state['values']['basic_entity'], $form, $form_state);
}

function employee_form_submit($form, &$form_state)
{
  $entity = $form_state['values']['basic_entity'];
  $entity->employee_id = $form_state['values']['employee_id'];
  $entity->fullname = $form_state['values']['fullname'];
  $entity->dayofbirth = $form_state['values']['dayofbirth'];
  $entity->gender = $form_state['values']['gender'];
  $entity->type = $form_state['values']['type'];
  $entity->created = $form_state['values']['created'];

  if (!isset($entity->uid)) {
    $entity->uid = $GLOBALS['user']['uid'];
  }
  field_attach_submit('employee', $entity, $form, $form_state);
  entity_form_submit_build_entity('employee', $entity, $form, $form_state);
  $result = entity_save('employee', $entity);
  // Display add/update messages
  if ($result == SAVED_NEW) {
    drupal_set_message(t('You have successfully for adding an employee .'));
    watchdog('Employee Adding', 'Successfully for adding an employee @id', array('@id' => $entity->eid), WATCHDOG_NOTICE);
  }


  if ($result == SAVED_UPDATED) {
    drupal_set_message(t('You have successfully for updating the employee details.'));
    watchdog('Employee Adding', 'Successfully for updating an employee @id', array('@id' => $entity->eid), WATCHDOG_NOTICE);
  }

  if ($form_state['values']['type'] == 'mbv') {
    $form_state['redirect'] = 'admin/structure/employee/manage/mbv/list';
  } else {
    $form_state['redirect'] = 'admin/structure/employee/manage/tcb/list';
  }
}

function employee_edit_delete($form, &$form_state)
{
  $entity = $form_state['values']['basic_entity'];
  if (entity_delete('employee', $entity->eid)) {
    drupal_set_message(t('The entity %eid has been deleted', array('%eid' => $entity->eid)));
    watchdog('Employee Deleting', 'Successfully for deleting an employee @id', array('@id' => $entity->eid), WATCHDOG_NOTICE);
  } else {
    watchdog('Employee Deleting', 'Failed to delete an employee @id', array('@id' => $entity->eid), WATCHDOG_NOTICE);
  }

  $form_state['redirect'] = '';
}

function employee_bd_load($type = NULL, $reset = FALSE)
{
  return $type ? $type : FALSE;
}

function employee_load($eid = NULL, $reset = FALSE)
{
  $eids = (isset($eid) ? array($eid) : array());
  $result = employee_load_multiple($eids, array(), $reset);
  return $result ? reset($result) : FALSE;
}

function employee_load_multiple($eids = FALSE, $conditions = array(), $reset = FALSE)
{
  return entity_load('employee', $eids, $conditions, $reset);
}

function employee_uri($employee)
{
  return array(
    'path' => 'train227/employee/' . $employee->eid,
  );
}

function employee_form_delete_confirm($form, &$form_state, $employee_type)
{

  $form_state['employee_type'] = $employee_type;
  $form['employee_type_id'] = array(
    '#type' => 'value',
    '#value' => $employee_type->eid,
  );
  
  return confirm_form($form,
    t('Are you sure you want to delete employee %title?', array('%title' => entity_label('employee', $employee_type))),
    'employee/' . entity_id('employee', $employee_type),
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

function employee_form_delete_confirm_submit($form, &$form_state)
{
  $employee_type = $form_state['employee_type'];
  $employee_type = reset($employee_type);
  entity_delete('employee', $employee_type[1]->eid);
  watchdog('example_task_type', '@type: deleted %title.', array('@type' => $employee_type[1]->type, '%title' => $employee_type[1]->type));
  drupal_set_message(t('@type %title has been deleted.', array('@type' => $employee_type[1]->type, '%title' => $employee_type[1]->type)));

  $form_state['redirect'] = '';
}

function delete_employee_by_id_form($form, $form_state)
{
  $form['employee_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => 'Employee ID',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
  );
  
  return $form;
}

function delete_employee_by_id_form_submit($form, &$form_state)
{
  
  $sql = "SELECT eid FROM employee1 WHERE employee_id = '" . $form_state['values']['employee_id'] . "'";
  try {
    $result = db_query($sql);
  } catch (PDOException $e) {
    watchdog('Delete_byid', 'Exception @a', array('@a' => $e->getMessage()), WATCHDOG_CRITICAL);
    return;
  }

  
  if (!empty($result)) {
    foreach ($result->fetchAll() as $key => $item) {
      entity_delete('employee', $item->eid);
    }
  }
  
  drupal_set_message(t('Delete successful'));
  $form_state['redirect'] = '';
}

function get_title_page_manager($type)
{
  $title_result = strtoupper($type) . ' MANAGE PAGE';
  return $title_result;
}

/**
 * Implements hook_entity_info_alter().
 */
//function train227_entity_info_alter(&$entity_info) {
//  foreach (employee_types() as $type => $info) {
//    $entity_info['employee']['bundles'][$type] = array(
//      'label' => $info->label,
//      'admin' => array(
//        'path' => 'admin/structure/employee-types/manage/%employee_type',
//        'real path' => 'admin/structure/employee-types/manage/' . $type,
//        'bundle argument' => 4,
//      ),
//    );
//  }
//}



/**
 * Implements hook_cron().
 */
function train227_cron()
{
  watchdog('Train227 Cron Processing', 'START');
  try {
    test_blank_employee_id();
  } catch (Exception $e) {
    watchdog('Train227 Cron Processing', 'FAILED');
  }
  watchdog('Train227 Cron Processing', 'FINISH');
}

function test_blank_employee_id() {
  $sql = "SELECT * FROM employee LIMIT 0,100";
  $result = db_query($sql);

  $queue = DrupalQueue::get('blank_employee_id_queue');

  if ($queue->numberOfItems() > 10000) {
    $queue->deleteQueue();
    $queue->createQueue();
  }

  foreach($result->fetchALl() as $key => $item) {

    if ($key % 100 == 0 && $key / 100 >= 1) {
      watchdog('Train227 Cron Processing', 'PROCESSING AT @key , @EmployeeID, Number Item in queue @queue_number', array('@key' => $key, '@EmployeeID' => $item->employee_id, '@queue_number' => $queue->numberOfItems()));
    }
    $queue->createItem($item);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function train227_cron_queue_info()
{
  $queues['blank_employee_id_queue'] = array(
    'worker callback' => 'blank_employee_id_handler',
    'time' => 1,
  );

  return $queues;
}

function blank_employee_id_handler($item) {
  if (empty($item->employee_id)) {
    watchdog('Blank EID', 'Blank Employee_ID at EID = @eid , Fullname = @fullname', array('@eid' => $item->eid, '@fullname' => $item->fullname));
  }
  if ($item->eid % 100 == 0 && $item->eid / 100 >= 1) {
    watchdog('Train227 Cron Processing', 'HANDLER AT @key , @EmployeeID', array('@key' => $item->eid, '@EmployeeID' => $item->employee_id));
  }
}
