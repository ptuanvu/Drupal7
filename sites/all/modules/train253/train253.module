<?php
/**
 * Created by PhpStorm.
 * User: monster
 * Date: 19/08/2015
 * Time: 15:30
 */
use Aws\S3\S3Client;

//require_once('PATH_TO_API/aws-autoloader.php');

/**
 * Implements hook_menu().
 */
function train253_menu()
{
  $items['file_api_training'] = array(
    'title' => 'File API Training',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_api_training_form'),
    'access callback' => TRUE,
  );

  $items['admin/config/file_api_training'] = array(
    'title' => t('File API Training Configure'),
    'description' => 'File API Training Configure',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    // we should implement this function in system.admin.inc file
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    // don't forget to add the file and path
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/file_api_training/settings'] = array(
    'title' => 'Location setup',
    'description' => 'Setting up location for saving file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_api_training_admin_setting'),
    'access arguments' => array('access administration pages'),
  );

  $items['file_api_downlown_page/%'] = array(
    'title' => 'Downloading',
    'page callback' => 'download_file',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['file_api_delete_page/%'] = array(
    'title' => 'Delete file',
    'page callback' => 'file_api_delete_file',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function file_api_training_form($form, $form_state) {
  $default_inputurl_value = 'public://';
  if (variable_get('saving_file_location', 'Local') == 'Amazon S3') {
    $default_inputurl_value = 's3://mbvmca/_developer/vuphan/';
  }
  $form['input_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Input URL. It will be saved in : ' . $default_inputurl_value),
    '#description' => 'Enter file url you wana load or save in',
    '#size' => 100,
    '#maxlength' => 255,
  );

  $form['input_file'] = array(
    '#type' => 'file',
    '#title' => 'Upload File',
    '#description' => 'Choose files to upload.'
  );

  $form['upload_file'] = array(
    '#type' => 'submit',
    '#value' => 'Upload',
    '#submit' => array('upload_file_submit'),
  );

  $form['download_file'] = array(
    '#type' => 'submit',
    '#value' => 'Download',
  );

  $form['scaning_file'] = array(
    '#type' => 'button',
    '#value' => 'Scan file',
    '#ajax' => array(
      'wrapper' => 'field-table-content-wrapper',
      'callback' => 'ajax_auto_generate_table_content_options',
      'effect' => 'slide',
    ),
  );

  $form['field_table_set'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="field-table-content-wrapper">',
    '#suffix' => '</div>',
  );

  $header = array(
    'filename' => t('Filename'),
    'url' => t('Url'),
    'options' => t('Options'),
  );

  $directory = isset($form_state['values']['input_url']) ? $form_state['values']['input_url'] : $default_inputurl_value;

    if (is_dir($directory)) {
      if (variable_get('saving_file_location', 'Local') == 'Local') {
        $files = file_scan_directory($directory, '/.*\.*$/', array('recurse' => FALSE));
      } else {
        $s3Client = S3Client::factory(array('key' => 'AKIAJ2IMA4N6YXL4I65A', 'secret' => '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'));
        $prefix = !empty($form_state['input']['input_url']) ? '_developer/vuphan' . $form_state['input']['input_url'] :'_developer/vuphan/';
        $response = $s3Client->listObjects(array('Bucket' => 'mbvmca', 'MaxKeys' => 1000, 'Prefix' => $prefix));
        $result = $response->getPath('Contents');
        $request_id = array();
        $files = array();
        foreach ($result as $file) {
          $file_tmp = new stdClass();
          $file_tmp->filename = basename($file['Key']);
          $files['s3://mbvmca/' . $file['Key']] = $file_tmp;
        }
      }

      $options = array();
      foreach ($files as $key => $file) {
        $options[] = array(
          'filename' => $file->filename,
          'url' => is_file($key) ? l($key, 'file_api_downlown_page/' . bin2hex($key), array('attributes' => array('target' => '_blank'))) : $key,
          'options' => is_file($key) ? l('Delete', 'file_api_delete_page/' . bin2hex($key)) : '',
        );
      }
      $form['field_table_set']['table_content'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
      );
    }


  return $form;
}

function download_file($uri) {
  $path = hex2bin($uri);
  if (is_file($path)) {
    DownloadFile($path);
  }

}

function file_api_delete_file($uri) {
  $path = hex2bin($uri);

  if (is_file($path)) {
    $file = get_file($path);
    if ($file != FALSE) {
      if (variable_get('saving_file_location', 'Local') == 'Local') {
        file_delete($file);
      } else {
        $s3Client = S3Client::factory(array('key' => 'AKIAJ2IMA4N6YXL4I65A', 'secret' => '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'));
        $response = $s3Client->deleteObject(array('Bucket' => 'mbvmca', 'Key' => substr($path, strlen('s3://' . 'mbvmca/')), 'Prefix' => '_developer/vuphan/'));
        $sql = "DELETE FROM file_managed WHERE uri = '" . $path . "'";
        $result = db_query($sql);

      }
      drupal_set_message(t('File @filename has been deleted', array('@filename' => $file->filename)));
    }

    drupal_goto('file_api_training');
  }
}

function get_file($path) {
  $sql = "SELECT * FROM file_managed WHERE uri = '" . $path . "'";
  $result_temp = db_query($sql);

  foreach ($result_temp->fetchAll() as $key => $file) {
    return $file;
  }

  return FALSE;
}

function file_api_training_form_validate($form, &$form_state) {

  $default_inputurl_value = 'public://';
  if (variable_get('saving_file_location', 'Local') == 'Amazon S3') {
    $default_inputurl_value = 's3://mbvmca/_developer/vuphan';
  }


  if (!empty($form_state['values']['input_url']) && $form_state['values']['input_url'][strlen($form_state['values']['input_url']) - 1] == '/') {
    $form_state['values']['input_url'] = substr($form_state['values']['input_url'], 0, strlen($form_state['values']['input_url']) - 1);
  }

  $form_state['values']['input_url'] = strpos($form_state['values']['input_url'], '://') == FALSE ? $default_inputurl_value . $form_state['values']['input_url'] : $form_state['values']['input_url'];

  $file = file_save_upload('input_file');
  $directory = $form_state['values']['input_url'];

  if ($file) {
    if (!is_dir($directory)) {
      if (!file_prepare_directory($directory, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
//        drupal_set_message(t('Failed to create %directory.', array('%directory' => $directory)), 'error');
        form_set_error('file', t('Failed to create %directory.', array('%directory' => $directory)));
      }
      else {
        $_SESSION['file_example_default_directory'] = $directory;
        if ($file = file_move($file, 'temporary://')) {
          $form_state['storage']['file'] = $file;
        } else {
          form_set_error('file', t("Failed to write the uploaded file to the site's file folder."));
        }
      }
    } else {
      if ($file = file_move($file, 'temporary://')) {
        $form_state['storage']['file'] = $file;
      } else {
        form_set_error('file', t("Failed to write the uploaded file to the site's file folder."));
      }
    }
  } else if (!empty($_FILES['files']['name']['input_file'])) {
    form_set_error('file', t('No file was uploaded.'));
  }
}

function upload_file_submit($form, &$form_state) {
  if (isset($form_state['storage']['file'])) {
    $file = $form_state['storage']['file'];
    unset($form_state['storage']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_move($file, $form_state['values']['input_url']);
    file_save($file);

    drupal_set_message(t('This file have been uploaded successfully, filename: @filename.', array('@filename' => $file->filename)));
  }
}

function file_api_training_form_submit($form, &$form_state) {
  $directory = $form_state['values']['input_url'];
  $flag = 0;

  if (file_exists($directory) && is_file($directory)) {
    DownloadFile($directory);
    $flag = 1;
  }

//  $filenames = array();
  foreach ($form_state['values']['table_content'] as $key => $value) {
    if ($value != 0) {
      $uri = $form['field_table_set']['table_content']['#options'][$key]['url'];
      $flag = 2;
//      $filenames[] = $uri;
      DownloadFile($uri);
      exit;
    }
  }
  if ($flag == 2) {
//    zipFilesAndDownload($filenames, 'zip2012.zip', $directory);
  }

  if ($flag == 0) {
    drupal_set_message(t('This is no file to download'));
  }
}

function zipFilesAndDownload($file_names,$archive_file_name,$file_path)
{
//  $archive_file_name = time() . '.zip';
////  touch($archive_file_name);
//  $zip = new ZipArchive();
//  //create the file and throw the error if unsuccessful
//  if ($zip->open($archive_file_name, ZIPARCHIVE::CREATE )!==TRUE) {
//    exit("cannot open <$archive_file_name>
//");
//  }
//  //add each files of $file_name array to archive
//  foreach($file_names as $files)
//  {
////    file_unmanaged_copy($file_path.$files,$files);
////    $zip->addFile($file_path.$files,$files);
////    $zip->addFile(file_get_contents(file_create_url($file_path.$files)),$files);
////    $zip->addFile('/var/www/dp/sites/default/files/'.$files);
//    $zip->addFile(file_create_url($file_path.$files), $files);
////    $zip->add
////    $zip->addFromString($files, file_get_contents(drupal_realpath($file_path.$files)));
//    //echo $file_path.$files,$files.";
//	}
//	$zip->close();
//  $result = create_zip($file_names, '2012.zip');
//	//then send the headers to foce download the zip file
//	if ($result) {
//    header("Content-type: application/zip");
//    header("Content-Disposition: attachment; filename=zip.zip");
//    header("Pragma: no-cache");
//    header("Expires: 0");
//    readfile($result);
//  }
//  readfile($result);
//	exit;
}

function create_zip($files = array(),$destination = '',$overwrite = false) {
  //if the zip file already exists and overwrite is false, return false
  if(file_exists($destination) && !$overwrite) { return false; }
  //vars
  $valid_files = array();
  //if files were passed in...
  if(is_array($files)) {
    //cycle through each file
    foreach($files as $file) {
      //make sure the file exists
      if(file_exists($file)) {
        $valid_files[] = $file;
      }
    }
  }
  //if we have good files...
  if(count($valid_files)) {
    //create the archive
    $zip = new ZipArchive();
    if($zip->open('sites/defaults/files/'.$destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
      return false;
    }
    //add the files
    foreach($valid_files as $file) {
      $zip->addFile($file,$file);
    }
    //debug
    //echo 'The zip archive contains ',$zip->numFiles,' files with a status of ',$zip->status;

    //close the zip -- done!
    $zip->close();

    //check to make sure the file exists
    return file_exists($zip->filename);
  }
  else
  {
    return false;
  }
}

function file_api_training_admin_setting($form, $form_state) {

  $form['saving_file_location'] = array(
    '#type' => 'radios',
    '#title' => 'Saving file location',
    '#description' => 'Choose your saving file location',
    '#options' => drupal_map_assoc(array('local' => 'Local', 'amazons3' => 'Amazon S3')),
    '#default_value' => variable_get('saving_file_location', 'Local'),
  );

  return system_settings_form($form);
}

function ajax_auto_generate_table_content_options($form, &$form_state) {
  return $form['field_table_set'];
}

//function download file src : http://php.net/manual/en/function.readfile.php
function DownloadFile($file) { // $file = include path
  if(file_exists($file)) {
//    ob_clean();
//
//    header('Content-Description: File Transfer');
//    header('Content-Type: application/octet-stream');
//    header('Content-Disposition: attachment; filename='.basename($file));
//    header('Content-Transfer-Encoding: binary');
//    header('Expires: 0');
//    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
//    header('Pragma: public');
//    header('Content-Length: ' . filesize($file));
//    ob_clean();
//    flush();
//    readfile($file);
    $header = array(
      'Content-Description' => 'File Transfer',
      'Content-Type' => 'application/octet-stream',
      'Content-Disposition' => 'attachment; filename='.basename($file),
      'Content-Transfer-Encoding' => 'binary',
      'Expires' => '0',
      'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
      'Pragma' => 'public',
      'Content-Length' => filesize($file),
    );
    file_transfer($file, $header);
  }
}